/*
#include <linux/module.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/uaccess.h>
#include <linux/io.h>


MODULE_AUTHOR("Kazushi Kobayashi");
MODULE_DESCRIPTION("driver for LED control");
MODULE_LICENSE("GPL");
MODULE_VERSION("0.0.1");

static dev_t dev;
static struct cdev cdv;
static struct class *cls = NULL;
static volatile u32 *gpio_base = NULL;//32bit  volatile:メモリアドレスを動かすなよってやつ？

static ssize_t led_write(struct file* flip, const char* buf, size_t count, loff_t* pos){ //デバイスファイルに書き込みがあった時の挙動を定義?
	char c;
	if(copy_from_user(&c, buf, sizeof(char)))//copy_from_userでデバイスファイルからの字を読み込む（ユーザーからの？）
		return -EFAULT;
	
//	printk(KERN_INFO "led_write is called\n"); led_writeが呼ばれたよっていう通知
//	printk(KERN_INFO "recive %c\n",c );//読み込んだ文字をログに書くよ！！
	
	if(c == '0')//ピンのオフの設定
		gpio_base[10] = 1 << 25;//下と同じ
	else if(c == '1')
		gpio_base[7] = 1 << 25; //1wo25ko分ずらしていれる　（1~25までのピン用のビットが並んでる、1を入れるとそのピンの出力がオフになる）
	


	return 1; //読み込んだ文字数を返す０だと終わらないので注意
}

static ssize_t sushi_read(struct file* flip, char* buf, size_t count, loff_t* pos){ //catされた時にsushiを返す
	int size = 0;
	char sushi[] = {0xF0, 0x9F, 0x8D, 0xA3, 0x0A};	//寿司の絵文字のバイナリ
	if(copy_to_user(buf+size, (const char*)sushi, sizeof(sushi))){//user側へ寿司をコピーする
		printk(KERN_ERR "sushi : copy_to_user failed\n");
		return -EFAULT;
	}
	size += sizeof(sushi);
	return size;
}*/
/*
static struct file_operations led_fops = {
	.owner = THIS_MODULE,
	.write = led_write,
//	.read = sushi_read
};


static int __init init_mod(void){  //カーネルモジュールの初期化

	int retval;

	gpio_base = ioremap_nocache(0xfe200000, 0xA0);//no_cache:キャッシュしない 0x~~から先のアドレスが読めるようになる

		//↓ピンを出力にする設定？
		const u32 led = 25;  //２５番ピン
		const u32 index = led/10;  //GPFSEL2　２５番ピンのあるところを指定　（２５/１０＝２）
		const u32 shift = (led%10)*3;  //GPIO25の操作を出来るビット
		const u32 mask = ~(0x7 << shift);  //操作したいビットの部分だけ０になっているマスク
		gpio_base[index] = (gpio_base[index] & mask) | (0x1 << shift);  //ビットを００１に設定


	retval = alloc_chrdev_region(&dev, 0, 1, "myled"); //デバイス番号の取得
	if(retval < 0){
		printk(KERN_ERR "alloc_chrdic_region failed. \n");
		return retval;
	}

	printk(KERN_INFO "%s is loaded. major:%d\n",__FILE__ ,MAJOR(dev));//ログを見れるようにする

	cdev_init(&cdv, &led_fops);//キャラクタデバイスの初期化
	retval = cdev_add(&cdv, dev, 1);//キャラクタデバイスをカーネルに登録
	if(retval < 0){
		printk(KERN_ERR "cdev_add failed. major:%d, minor:%d",MAJOR(dev),MINOR(dev));
		return retval;
	}

	cls = class_create(THIS_MODULE, "myled");//クラスの作成/sys/class下にこのデバイスの情報を置く。ユーザ側から見れるようにする
	if(IS_ERR(cls)){
		printk(KERN_ERR "class_create failed.");
		return PTR_ERR(cls);
	}
	device_create(cls, NULL, dev, NULL, "myled%d", MINOR(dev));//デバイス情報の書き込み

	return 0;
}

static void __exit cleanup_mod(void){  //後始末
	cdev_del(&cdv);//キャラクタデバイスの破棄
	device_destroy(cls, dev);//デバイス情報の削除（クラスの中の？）
	class_destroy(cls);//クラスの削除
	unregister_chrdev_region(dev,1);//デバイス番号の開放
	printk(KERN_INFO "%s is unloaded. major:%d\n",__FILE__,MAJOR(dev));
	iounmap(gpio_base);
}

module_init(init_mod); //マクロで関数を登録
module_exit(cleanup_mod);//同上
*/

#include <linux/module.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/uaccess.h>
#include <linux/io.h>
#include <linux/delay.h>

MODULE_AUTHOR("Kobayashi Kazushi");
MODULE_DESCRIPTION("driver for LED control");
MODULE_LICENSE("GPL");
MODULE_VERSION("0.0.1");

static dev_t dev;
static struct cdev cdv;
static struct class *cls = NULL;

static volatile u32 *gpio_base = NULL;

static ssize_t led_write(struct file* filp, const char* buf, size_t count, loff_t* pos)
{
	char c;
	int num = 0;
	if(copy_from_user(&c,buf,sizeof(char)))
		return -EFAULT;

	if(c == '0')
		gpio_base[10] = 1 << 25;

	else if(c == '1'){
		gpio_base[7] = 1 << 25;
		msleep(300);
		gpio_base[10] = 1 << 25;
	}
	else if(c == '2'){
		for(num = 0 ; num < 2 ; num ++){
			gpio_base[7] = 1 << 25;
			msleep(300);
			gpio_base[10] = 1 << 25;
			msleep(300);
		}
	}
	else if(c == '3'){
		for(num = 0 ; num < 3 ; num ++){
			gpio_base[7] = 1 << 25;
			msleep(300);
			gpio_base[10] = 1 << 25;
			msleep(300);
		}
	}
	else if(c == '4'){
		for(num = 0 ; num < 4 ; num ++){
			gpio_base[7] = 1 << 25;
			msleep(300);
			gpio_base[10] = 1 << 25;
			msleep(300);
		}
	}
	else if(c == '5'){
		for(num = 0 ; num < 5 ; num ++){
			gpio_base[7] = 1 << 25;
			msleep(300);
			gpio_base[10] = 1 << 25;
			msleep(300);
		}
	}
	else if(c == '6'){
		for(num = 0 ; num < 6 ; num ++){
			gpio_base[7] = 1 << 25;
			msleep(300);
			gpio_base[10] = 1 << 25;
			msleep(300);
		}
	}
	else if(c == '7'){
		for(num = 0 ; num < 7 ; num ++){
			gpio_base[7] = 1 << 25;
			msleep(300);
			gpio_base[10] = 1 << 25;
			msleep(300);
		}
	}
	else if(c == '8'){
		for(num = 0 ; num < 8 ; num ++){
			gpio_base[7] = 1 << 25;
			msleep(300);
			gpio_base[10] = 1 << 25;
			msleep(300);
		}
	}
	else if(c == '9'){
		for(num = 0 ; num < 9 ; num ++){
			gpio_base[7] = 1 << 25;
			msleep(300);
			gpio_base[10] = 1 << 25;
			msleep(300);
		}
	}

        return 1;
}

static struct file_operations led_fops = {
	.owner = THIS_MODULE,
	.write = led_write
};

static int __init init_mod(void)
{
	int retval;

	gpio_base = ioremap_nocache(0xfe200000, 0xA0); //0xfe..:base address, 0xA0: region to map

	const u32 led = 25;
	const u32 index = led/10;//GPFSEL2
	const u32 shift = (led%10)*3;//15bit
	const u32 mask = ~(0x7 << shift);//11111111111111000111111111111111
	gpio_base[index] = (gpio_base[index] & mask) | (0x1 << shift);//001: output flag
	//11111111111111001111111111111111
	
	retval =  alloc_chrdev_region(&dev, 0, 1, "myled");
	if(retval < 0){
		printk(KERN_ERR "alloc_chrdev_region failed.\n");
		return retval;
	}
	printk(KERN_INFO "%s is loaded. major:%d\n",__FILE__,MAJOR(dev));

	cdev_init(&cdv, &led_fops);
	cdv.owner = THIS_MODULE;
	retval = cdev_add(&cdv, dev, 1);
	if(retval < 0){
		printk(KERN_ERR "cdev_add failed. major:%d, minor:%d",MAJOR(dev),MINOR(dev));
		return retval;
	}

	cls = class_create(THIS_MODULE,"myled");
	if(IS_ERR(cls)){
		printk(KERN_ERR "class_create failed.");
		return PTR_ERR(cls);
	}
	device_create(cls, NULL, dev, NULL, "myled%d",MINOR(dev));

	return 0;
}

static void __exit cleanup_mod(void)
{
	cdev_del(&cdv);
	device_destroy(cls, dev);
	class_destroy(cls);
	unregister_chrdev_region(dev, 1);
	printk(KERN_INFO "%s is unloaded. major:%d\n",__FILE__,MAJOR(dev));
	iounmap(gpio_base);
}

module_init(init_mod);
module_exit(cleanup_mod);
